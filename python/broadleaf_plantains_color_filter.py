# -*- coding: utf-8 -*-
"""Broadleaf Plantains-Color Filter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1COIJsfKzqcgZ084DC5P5YnbEKKrSZjCe
"""

!pip install ultralytics
from ultralytics import YOLO

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="W23f16qA2Cv9m47qLNxK")
project = rf.workspace("toxic-plants").project("broadleaf-plantains")
version = project.version(4)
dataset = version.download("yolov11")

model = YOLO('yolo11n.pt')

import os
from ultralytics import YOLO

# Get the absolute path of the 'Broadleaf-Plantains-1' directory
dataset_dir = os.path.abspath("Broadleaf-Plantains-4")

# Define paths for train and validation images and labels
train_images_dir = os.path.join(dataset_dir, 'train', 'images')
val_images_dir = os.path.join(dataset_dir, 'valid', 'images')
# Assuming labels are stored in a 'labels' subdirectory within train and valid
train_labels_dir = os.path.join(dataset_dir, 'train', 'labels')
val_labels_dir = os.path.join(dataset_dir, 'valid', 'labels')


# Start training the model, directly specifying image and label directories

dataset = version.download("yolov11")
results = model.train(data="/content/Broadleaf-Plantains-4/data.yaml", epochs=1, imgsz=64,save=True,save_period=5,time=10)

results = model(source="/content/Broadleaf-Plantains-4/train/images", conf=0.005)
for result in results:
    result.show()

from ultralytics import YOLO
import cv2
import numpy as np

colors = {
    'red': ([0, 50, 50], [10, 255, 255]),  # Dirt
    'brown': ([10, 35, 50], [45, 255, 255]),  # Dead leaves/grass (Adjusted)
    'green': ([35, 80, 20], [55, 255, 255]),  # Grass/greenery (Adjusted)
    'purple': ([120, 50, 30], [160, 255, 255]),  # Purple flowers
    'yellow': ([20, 100, 100], [30, 255, 255]),  # Yellow flowers
    'white': ([0, 0, 150], [180, 50, 255])  # Snow
}

from ultralytics import YOLO
import cv2
import numpy as np
from google.colab.patches import cv2_imshow # Import the cv2_imshow function


def detect_colors(image_path, overlap=True):
    """
    Detects colors in an image using YOLO and displays the results.

    Args:
        image_path (str): The path to the input image.
        overlap (bool): Whether to allow overlapping colors.
    """
    img = cv2.imread(image_path)
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    color_masks = {}
    for color_name, (lower, upper) in colors.items():
        mask = cv2.inRange(hsv, np.array(lower), np.array(upper))
        color_masks[color_name] = mask

    if overlap:
        # Overlapping colors: simply display the masks on the original image
        for color_name, mask in color_masks.items():
            img[mask > 0] = colors[color_name][0]  # Color the detected regions
    else:
        # Non-overlapping colors: find contours and draw bounding boxes
        for color_name, mask in color_masks.items():
            contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                cv2.rectangle(img, (x, y), (x + w, y + h), colors[color_name][0], 2)

    cv2_imshow(img) # Use cv2_imshow instead of cv2.imshow
    #cv2.waitKey(0) # Remove this line
    #cv2.destroyAllWindows() # Remove this line

import os
image_path = '/content/Broadleaf-Plantains-4/train/images'  # Path to your image directory
for filename in os.listdir(image_path):
    if filename.endswith(('.jpg', '.png', '.jpeg')):  # Filter for image files
        img_path = os.path.join(image_path, filename)  # Create the full image path
        detect_colors(img_path, overlap=True)  # With overlapping
        #detect_colors(img_path, overlap=False)  # Without overlapping